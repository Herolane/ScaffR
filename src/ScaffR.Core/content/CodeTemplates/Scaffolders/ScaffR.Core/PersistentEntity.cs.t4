<#@ Template Language="C#" HostSpecific="True" Inherits="DynamicTransform" #>
<#@ Output Extension="cs" #>
namespace <#= Model.Namespace #>.Core.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Runtime.Serialization;

    /// <summary>
    /// Properties common for all entities with CRUD behavior.
    /// </summary>
    [Serializable]
    [DataContract]
    public abstract class PersistentEntity : IValidatableObject
    {
        /// <summary>
        /// The primary key for all entities...
        /// </summary>
        [DataMember]
        [Key]
        public int Id { get; set; }

        /// <summary>
        /// The time when the entity was first created.
        /// </summary>
        [DataMember]
        public DateTime? Created { get; set; }

		[Timestamp]
		public byte[] RowVersion { get; set; }

        /// <summary>
        /// The time when the entity was last saved/updated.
        /// </summary>
        [DataMember]
        public DateTime? Updated { get; set; }

        public virtual IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            // Override this method to implement custom validation in your entities
            
            // This is only for making it compile... and returning null will give an exception.
            if (false)
                yield return new ValidationResult("Well, this should not happend...");
        }
    }
}