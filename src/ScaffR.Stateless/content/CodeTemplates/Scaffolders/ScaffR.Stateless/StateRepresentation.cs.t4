<#@ Template Language="C#" HostSpecific="True" Inherits="DynamicTransform" #>
<#@ Output Extension="cs" #>
// --------------------------------------------------------------------------------------------------------------------
// <copyright file="StateRepresentation.cs" company="">
//   
// </copyright>
// <summary>
//   The state machine.
// </summary>
// --------------------------------------------------------------------------------------------------------------------

namespace <#= Model.Namespace #>.Stateless
{
    using System;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The state machine.
    /// </summary>
    /// <typeparam name="TState">
    /// </typeparam>
    /// <typeparam name="TTrigger">
    /// </typeparam>
    public partial class StateMachine<TState, TTrigger>
    {
        /// <summary>
        /// The state representation.
        /// </summary>
        internal class StateRepresentation : ICloneable
        {
            #region Fields

            /// <summary>
            /// The _entry actions.
            /// </summary>
            private readonly IList<Action<Transition, object[]>> _entryActions =
                new List<Action<Transition, object[]>>();

            /// <summary>
            /// The _exit actions.
            /// </summary>
            private readonly IList<Action<Transition>> _exitActions = new List<Action<Transition>>();

            /// <summary>
            /// The _state.
            /// </summary>
            private readonly TState _state;

            /// <summary>
            /// The _substates.
            /// </summary>
            private readonly IList<StateRepresentation> _substates = new List<StateRepresentation>();

            /// <summary>
            /// The _trigger behaviours.
            /// </summary>
            private readonly IDictionary<TTrigger, ICollection<TriggerBehaviour>> _triggerBehaviours =
                new Dictionary<TTrigger, ICollection<TriggerBehaviour>>();

            /// <summary>
            /// The _superstate.
            /// </summary>
            private StateRepresentation _superstate; // null

            #endregion

            #region Constructors and Destructors

            /// <summary>
            /// Initializes a new instance of the <see cref="StateRepresentation"/> class.
            /// </summary>
            /// <param name="state">
            /// The state.
            /// </param>
            public StateRepresentation(TState state)
            {
                this._state = state;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref="StateRepresentation"/> class. 
            /// Clone constructor
            /// </summary>
            /// <param name="state">
            /// The state.
            /// </param>
            /// <param name="triggerBehaviours">
            /// The trigger Behaviours.
            /// </param>
            /// <param name="entryActions">
            /// The entry Actions.
            /// </param>
            /// <param name="exitActions">
            /// The exit Actions.
            /// </param>
            /// <param name="superstate">
            /// The superstate.
            /// </param>
            /// <param name="substates">
            /// The substates.
            /// </param>
            private StateRepresentation(
                TState state, 
                IEnumerable<KeyValuePair<TTrigger, ICollection<TriggerBehaviour>>> triggerBehaviours, 
                IEnumerable<Action<Transition, object[]>> entryActions, 
                IEnumerable<Action<Transition>> exitActions, 
                StateRepresentation superstate, 
                IEnumerable<StateRepresentation> substates)
            {
                this._state = state;

                foreach (var behaviour in triggerBehaviours)
                {
                    this._triggerBehaviours.Add(behaviour);
                }

                foreach (var action in entryActions)
                {
                    this._entryActions.Add(action);
                }

                foreach (var action in exitActions)
                {
                    this._exitActions.Add(action);
                }

                if (superstate != null)
                {
                    this._superstate = superstate.Clone();
                }

                foreach (StateRepresentation substate in substates)
                {
                    this._substates.Add(substate.Clone());
                }
            }

            #endregion

            #region Public Properties

            /// <summary>
            /// Gets the permitted triggers.
            /// </summary>
            public IEnumerable<TTrigger> PermittedTriggers
            {
                get
                {
                    IEnumerable<TTrigger> result =
                        this._triggerBehaviours.Where(t => t.Value.Any(a => a.IsGuardConditionMet)).Select(t => t.Key);

                    if (this.Superstate != null)
                    {
                        result = result.Union(this.Superstate.PermittedTriggers);
                    }

                    return result.ToArray();
                }
            }

            /// <summary>
            /// Gets or sets the superstate.
            /// </summary>
            public StateRepresentation Superstate
            {
                get
                {
                    return this._superstate;
                }

                set
                {
                    this._superstate = value;
                }
            }

            /// <summary>
            /// Gets the underlying state.
            /// </summary>
            public TState UnderlyingState
            {
                get
                {
                    return this._state;
                }
            }

            #endregion

            #region Public Methods and Operators

            /// <summary>
            /// The add entry action.
            /// </summary>
            /// <param name="trigger">
            /// The trigger.
            /// </param>
            /// <param name="action">
            /// The action.
            /// </param>
            public void AddEntryAction(TTrigger trigger, Action<Transition, object[]> action)
            {
                Enforce.ArgumentNotNull(action, "action");
                this._entryActions.Add(
                    (t, args) =>
                        {
                            if (t.Trigger.Equals(trigger))
                            {
                                action(t, args);
                            }
                        });
            }

            /// <summary>
            /// The add entry action.
            /// </summary>
            /// <param name="action">
            /// The action.
            /// </param>
            public void AddEntryAction(Action<Transition, object[]> action)
            {
                this._entryActions.Add(Enforce.ArgumentNotNull(action, "action"));
            }

            /// <summary>
            /// The add exit action.
            /// </summary>
            /// <param name="action">
            /// The action.
            /// </param>
            public void AddExitAction(Action<Transition> action)
            {
                this._exitActions.Add(Enforce.ArgumentNotNull(action, "action"));
            }

            /// <summary>
            /// The add substate.
            /// </summary>
            /// <param name="substate">
            /// The substate.
            /// </param>
            public void AddSubstate(StateRepresentation substate)
            {
                Enforce.ArgumentNotNull(substate, "substate");
                this._substates.Add(substate);
            }

            /// <summary>
            /// The add trigger behaviour.
            /// </summary>
            /// <param name="triggerBehaviour">
            /// The trigger behaviour.
            /// </param>
            public void AddTriggerBehaviour(TriggerBehaviour triggerBehaviour)
            {
                ICollection<TriggerBehaviour> allowed;
                if (!this._triggerBehaviours.TryGetValue(triggerBehaviour.Trigger, out allowed))
                {
                    allowed = new List<TriggerBehaviour>();
                    this._triggerBehaviours.Add(triggerBehaviour.Trigger, allowed);
                }

                allowed.Add(triggerBehaviour);
            }

            /// <summary>
            /// The can handle.
            /// </summary>
            /// <param name="trigger">
            /// The trigger.
            /// </param>
            /// <returns>
            /// The System.Boolean.
            /// </returns>
            public bool CanHandle(TTrigger trigger)
            {
                TriggerBehaviour unused;
                return this.TryFindHandler(trigger, out unused);
            }

            /// <summary>
            /// The clone.
            /// </summary>
            /// <returns>
            /// The Stateless.StateMachine`2+StateRepresentation.
            /// </returns>
            public StateRepresentation Clone()
            {
                return new StateRepresentation(
                    this._state, 
                    this._triggerBehaviours, 
                    this._entryActions, 
                    this._exitActions, 
                    this._superstate, 
                    this._substates);
            }

            /// <summary>
            /// The enter.
            /// </summary>
            /// <param name="transition">
            /// The transition.
            /// </param>
            /// <param name="entryArgs">
            /// The entry args.
            /// </param>
            public void Enter(Transition transition, params object[] entryArgs)
            {
                Enforce.ArgumentNotNull(transition, "transtion");

                if (transition.IsReentry)
                {
                    this.ExecuteEntryActions(transition, entryArgs);
                }
                else if (!this.Includes(transition.Source))
                {
                    if (this._superstate != null)
                    {
                        this._superstate.Enter(transition, entryArgs);
                    }

                    this.ExecuteEntryActions(transition, entryArgs);
                }
            }

            /// <summary>
            /// The exit.
            /// </summary>
            /// <param name="transition">
            /// The transition.
            /// </param>
            public void Exit(Transition transition)
            {
                Enforce.ArgumentNotNull(transition, "transtion");

                if (transition.IsReentry)
                {
                    this.ExecuteExitActions(transition);
                }
                else if (!this.Includes(transition.Destination))
                {
                    this.ExecuteExitActions(transition);
                    if (this._superstate != null)
                    {
                        this._superstate.Exit(transition);
                    }
                }
            }

            /// <summary>
            /// The includes.
            /// </summary>
            /// <param name="state">
            /// The state.
            /// </param>
            /// <returns>
            /// The System.Boolean.
            /// </returns>
            public bool Includes(TState state)
            {
                return this._state.Equals(state) || this._substates.Any(s => s.Includes(state));
            }

            /// <summary>
            /// The is included in.
            /// </summary>
            /// <param name="state">
            /// The state.
            /// </param>
            /// <returns>
            /// The System.Boolean.
            /// </returns>
            public bool IsIncludedIn(TState state)
            {
                return this._state.Equals(state) || (this._superstate != null && this._superstate.IsIncludedIn(state));
            }

            /// <summary>
            /// The try find handler.
            /// </summary>
            /// <param name="trigger">
            /// The trigger.
            /// </param>
            /// <param name="handler">
            /// The handler.
            /// </param>
            /// <returns>
            /// The System.Boolean.
            /// </returns>
            public bool TryFindHandler(TTrigger trigger, out TriggerBehaviour handler)
            {
                return this.TryFindLocalHandler(trigger, out handler)
                        || (this.Superstate != null && this.Superstate.TryFindHandler(trigger, out handler));
            }

            #endregion

            #region Explicit Interface Methods

            /// <summary>
            /// The clone.
            /// </summary>
            /// <returns>
            /// The System.Object.
            /// </returns>
            object ICloneable.Clone()
            {
                return this.Clone();
            }

            #endregion

            #region Methods

            /// <summary>
            /// The execute entry actions.
            /// </summary>
            /// <param name="transition">
            /// The transition.
            /// </param>
            /// <param name="entryArgs">
            /// The entry args.
            /// </param>
            private void ExecuteEntryActions(Transition transition, object[] entryArgs)
            {
                Enforce.ArgumentNotNull(transition, "transtion");
                Enforce.ArgumentNotNull(entryArgs, "entryArgs");
                foreach (var action in this._entryActions)
                {
                    action(transition, entryArgs);
                }
            }

            /// <summary>
            /// The execute exit actions.
            /// </summary>
            /// <param name="transition">
            /// The transition.
            /// </param>
            private void ExecuteExitActions(Transition transition)
            {
                Enforce.ArgumentNotNull(transition, "transtion");
                foreach (var action in this._exitActions)
                {
                    action(transition);
                }
            }

            /// <summary>
            /// The try find local handler.
            /// </summary>
            /// <param name="trigger">
            /// The trigger.
            /// </param>
            /// <param name="handler">
            /// The handler.
            /// </param>
            /// <returns>
            /// The System.Boolean.
            /// </returns>
            /// <exception cref="InvalidOperationException">
            /// </exception>
            private bool TryFindLocalHandler(TTrigger trigger, out TriggerBehaviour handler)
            {
                ICollection<TriggerBehaviour> possible;
                if (!this._triggerBehaviours.TryGetValue(trigger, out possible))
                {
                    handler = null;
                    return false;
                }

                TriggerBehaviour[] actual = possible.Where(at => at.IsGuardConditionMet).ToArray();

                if (actual.Count() > 1)
                {
                    throw new InvalidOperationException(
                        string.Format(StateRepresentationResources.MultipleTransitionsPermitted, trigger, this._state));
                }

                handler = actual.FirstOrDefault();
                return handler != null;
            }

            #endregion
        }
    }
}