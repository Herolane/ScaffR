<#@ Template Language="C#" HostSpecific="True" Inherits="DynamicTransform" #>
<#@ Output Extension="cs" #>
namespace <#= Model.Namespace #>.Stateless
{
    using System;
    using System.Diagnostics.Contracts;

    /// <summary>
    /// The state machine.
    /// </summary>
    /// <typeparam name="TState">
    /// </typeparam>
    /// <typeparam name="TTrigger">
    /// </typeparam>
    partial class StateMachine<TState, TTrigger>
    {
        /// <summary>
        /// 	[Immutable] Associates configured parameters with an underlying trigger value.
        /// </summary>
        public abstract class TriggerWithParameters : ICloneable
        {
            #region Fields

            /// <summary>
            /// The _argument types.
            /// </summary>
            private readonly Type[] _argumentTypes;

            /// <summary>
            /// The _underlying trigger.
            /// </summary>
            private readonly TTrigger _underlyingTrigger;

            #endregion

            #region Constructors and Destructors

            /// <summary>
            /// Initializes a new instance of the <see cref="TriggerWithParameters"/> class. 
            /// 	Create a configured trigger.
            /// </summary>
            /// <param name="underlyingTrigger">
            /// Trigger represented by this trigger configuration.
            /// </param>
            /// <param name="argumentTypes">
            /// The argument types expected by the trigger.
            /// </param>
            public TriggerWithParameters(TTrigger underlyingTrigger, params Type[] argumentTypes)
            {
                Enforce.ArgumentNotNull(argumentTypes, "argumentTypes");

                this._underlyingTrigger = underlyingTrigger;

                // array mutable, clone
                this._argumentTypes = (Type[])argumentTypes.Clone();
            }

            #endregion

            #region Public Properties

            /// <summary>
            /// 	Gets the underlying trigger value that has been configured.
            /// </summary>
            public TTrigger Trigger
            {
                get
                {
                    return this._underlyingTrigger;
                }
            }

            #endregion

            #region Public Methods and Operators

            /// <summary>
            /// 	Clones the trigger with parameters.
            /// </summary>
            /// <returns>A non-null trigger with parameters.</returns>
            public TriggerWithParameters Clone()
            {
                Contract.Ensures(Contract.Result<TriggerWithParameters>() != null);
                return this;
            }

            /// <summary>
            /// 	Ensure that the supplied arguments are compatible with those configured for this
            /// 	trigger.
            /// </summary>
            /// <param name="args">
            /// </param>
            public void ValidateParameters(object[] args)
            {
                Enforce.ArgumentNotNull(args, "args");
                ParameterConversion.Validate(args, this._argumentTypes);
            }

            #endregion

            #region Explicit Interface Methods

            /// <summary>
            /// The clone.
            /// </summary>
            /// <returns>
            /// The System.Object.
            /// </returns>
            object ICloneable.Clone()
            {
                return this.Clone();
            }

            #endregion
        }

        /// <summary>
        /// 	A configured trigger with one required argument.
        /// </summary>
        /// <typeparam name="TArg0">
        /// The type of the first argument.
        /// </typeparam>
        public class TriggerWithParameters<TArg0> : TriggerWithParameters
        {
            #region Constructors and Destructors

            /// <summary>
            /// Initializes a new instance of the <see cref="TriggerWithParameters{TArg0}"/> class. 
            /// 	Create a configured trigger.
            /// </summary>
            /// <param name="underlyingTrigger">
            /// Trigger represented by this trigger configuration.
            /// </param>
            public TriggerWithParameters(TTrigger underlyingTrigger)
                : base(underlyingTrigger, typeof(TArg0))
            {
            }

            #endregion
        }

        /// <summary>
        /// 	A configured trigger with two required arguments.
        /// </summary>
        /// <typeparam name="TArg0">
        /// The type of the first argument.
        /// </typeparam>
        /// <typeparam name="TArg1">
        /// The type of the second argument.
        /// </typeparam>
        public class TriggerWithParameters<TArg0, TArg1> : TriggerWithParameters
        {
            #region Constructors and Destructors

            /// <summary>
            /// Initializes a new instance of the <see cref="TriggerWithParameters{TArg0,TArg1}"/> class. 
            /// 	Create a configured trigger.
            /// </summary>
            /// <param name="underlyingTrigger">
            /// Trigger represented by this trigger configuration.
            /// </param>
            public TriggerWithParameters(TTrigger underlyingTrigger)
                : base(underlyingTrigger, typeof(TArg0), typeof(TArg1))
            {
            }

            #endregion
        }

        /// <summary>
        /// 	A configured trigger with three required arguments.
        /// </summary>
        /// <typeparam name="TArg0">
        /// The type of the first argument.
        /// </typeparam>
        /// <typeparam name="TArg1">
        /// The type of the second argument.
        /// </typeparam>
        /// <typeparam name="TArg2">
        /// The type of the third argument.
        /// </typeparam>
        public class TriggerWithParameters<TArg0, TArg1, TArg2> : TriggerWithParameters
        {
            #region Constructors and Destructors

            /// <summary>
            /// Initializes a new instance of the <see cref="TriggerWithParameters{TArg0,TArg1,TArg2}"/> class. 
            /// 	Create a configured trigger.
            /// </summary>
            /// <param name="underlyingTrigger">
            /// Trigger represented by this trigger configuration.
            /// </param>
            public TriggerWithParameters(TTrigger underlyingTrigger)
                : base(underlyingTrigger, typeof(TArg0), typeof(TArg1), typeof(TArg2))
            {
            }

            #endregion
        }
    }
}