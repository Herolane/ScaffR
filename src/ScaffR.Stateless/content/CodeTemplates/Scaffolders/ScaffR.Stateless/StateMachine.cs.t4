<#@ Template Language="C#" HostSpecific="True" Inherits="DynamicTransform" #>
<#@ Output Extension="cs" #>
namespace <#= Model.Namespace #>.Stateless
{
    using System;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Base class for all state machines
    /// </summary>
    public abstract class StateMachine
    {
        #region Fields

        /// <summary>
        /// The _id.
        /// </summary>
        private readonly Guid _id;

        #endregion

        #region Constructors and Destructors

        /// <summary>
        /// Initializes a new instance of the <see cref="StateMachine"/> class. 
        /// Initializes the ID
        /// </summary>
        protected StateMachine()
        {
            this._id = Guid.NewGuid();
        }

        #endregion

        #region Public Properties

        /// <summary>
        /// A unique identifier for this state machine.
        /// </summary>
        public Guid Id
        {
            get
            {
                return this._id;
            }
        }

        #endregion
    }

    /// <summary>
    /// Models behaviour as transitions between a finite set of states.
    /// </summary>
    /// <typeparam name="TState">
    /// The type used to represent the states.
    /// </typeparam>
    /// <typeparam name="TTrigger">
    /// The type used to represent the triggers that cause state transitions.
    /// </typeparam>
    public partial class StateMachine<TState, TTrigger> : StateMachine, ICloneable
    {
        #region Fields

        /// <summary>
        /// The _state accessor.
        /// </summary>
        private readonly Func<TState> _stateAccessor;

        /// <summary>
        /// The _state configuration.
        /// </summary>
        private readonly IDictionary<TState, StateRepresentation> _stateConfiguration =
            new Dictionary<TState, StateRepresentation>();

        /// <summary>
        /// The _state mutator.
        /// </summary>
        private readonly Action<TState> _stateMutator;

        /// <summary>
        /// The _trigger configuration.
        /// </summary>
        private readonly IDictionary<TTrigger, TriggerWithParameters> _triggerConfiguration =
            new Dictionary<TTrigger, TriggerWithParameters>();

        /// <summary>
        /// The _unhandled trigger action.
        /// </summary>
        private Action<TState, TTrigger> _unhandledTriggerAction = DefaultUnhandledTriggerAction;

        #endregion

        #region Constructors and Destructors

        /// <summary>
        /// Initializes a new instance of the <see cref="StateMachine{TState,TTrigger}"/> class. 
        /// Construct a state machine with external state storage.
        /// </summary>
        /// <param name="stateAccessor">
        /// A function that will be called to read the current state value.
        /// </param>
        /// <param name="stateMutator">
        /// An action that will be called to write new state values.
        /// </param>
        public StateMachine(Func<TState> stateAccessor, Action<TState> stateMutator)
        {
            this._stateAccessor = Enforce.ArgumentNotNull(stateAccessor, "stateAccessor");
            this._stateMutator = Enforce.ArgumentNotNull(stateMutator, "stateMutator");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StateMachine{TState,TTrigger}"/> class. 
        /// Construct a state machine.
        /// </summary>
        /// <param name="initialState">
        /// The initial state.
        /// </param>
        public StateMachine(TState initialState)
        {
            var reference = new StateReference { State = initialState };
            this._stateAccessor = () => reference.State;
            this._stateMutator = s => reference.State = s;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StateMachine{TState,TTrigger}"/> class.
        /// </summary>
        /// <param name="stateAccessor">
        /// The state accessor.
        /// </param>
        /// <param name="stateConfiguration">
        /// The state configuration.
        /// </param>
        /// <param name="triggerConfiguration">
        /// The trigger configuration.
        /// </param>
        private StateMachine(
            Func<TState> stateAccessor, 
            IEnumerable<KeyValuePair<TState, StateRepresentation>> stateConfiguration, 
            IEnumerable<KeyValuePair<TTrigger, TriggerWithParameters>> triggerConfiguration)
        {
            TState existingState = stateAccessor();
            var reference = new StateReference { State = existingState };
            this._stateAccessor = () => reference.State;
            this._stateMutator = s => reference.State = s;

            foreach (var stateRepresentation in stateConfiguration)
            {
                this._stateConfiguration.Add(stateRepresentation.Key, stateRepresentation.Value.Clone());
            }

            foreach (var triggerWithParameters in triggerConfiguration)
            {
                this._triggerConfiguration.Add(triggerWithParameters.Key, triggerWithParameters.Value.Clone());
            }
        }

        #endregion

        #region Public Properties

        /// <summary>
        /// The currently-permissible trigger values.
        /// </summary>
        public IEnumerable<TTrigger> PermittedTriggers
        {
            get
            {
                return this.CurrentRepresentation.PermittedTriggers;
            }
        }

        /// <summary>
        /// The current state.
        /// </summary>
        public TState State
        {
            get
            {
                return this._stateAccessor();
            }

            private set
            {
                this._stateMutator(value);
            }
        }

        #endregion

        #region Properties

        /// <summary>
        /// Gets the current representation.
        /// </summary>
        private StateRepresentation CurrentRepresentation
        {
            get
            {
                return this.GetRepresentation(this.State);
            }
        }

        #endregion

        #region Public Methods and Operators

        /// <summary>
        /// Returns true if <paramref name="trigger"/> can be fired
        /// in the current state.
        /// </summary>
        /// <param name="trigger">
        /// Trigger to test.
        /// </param>
        /// <returns>
        /// True if the trigger can be fired, false otherwise.
        /// </returns>
        public bool CanFire(TTrigger trigger)
        {
            return this.CurrentRepresentation.CanHandle(trigger);
        }

        /// <summary>
        /// Creates a clone of the state machine which is 
        /// in the same state with the same callbacks, but with a new Id
        /// and new mutable data structures.
        /// </summary>
        /// <returns>
        /// The Stateless.StateMachine`2[TState -&gt; TState, TTrigger -&gt; TTrigger].
        /// </returns>
        /// <exception cref="NotImplementedException">
        /// </exception>
        public StateMachine<TState, TTrigger> Clone()
        {
            return new StateMachine<TState, TTrigger>(
                this._stateAccessor, this._stateConfiguration, this._triggerConfiguration);
        }

        /// <summary>
        /// Begin configuration of the entry/exit actions and allowed transitions
        /// when the state machine is in a particular state.
        /// </summary>
        /// <param name="state">
        /// The state to configure.
        /// </param>
        /// <returns>
        /// A configuration object through which the state can be configured.
        /// </returns>
        public StateConfiguration Configure(TState state)
        {
            return new StateConfiguration(this.GetRepresentation(state), this.GetRepresentation);
        }

        /// <summary>
        /// Transition from the current state via the specified trigger.
        /// The target state is determined by the configuration of the current state.
        /// Actions associated with leaving the current state and entering the new one
        /// will be invoked.
        /// </summary>
        /// <param name="trigger">
        /// The trigger to fire.
        /// </param>
        /// <exception cref="System.InvalidOperationException">
        /// The current state does
        /// not allow the trigger to be fired.
        /// </exception>
        public void Fire(TTrigger trigger)
        {
            this.InternalFire(trigger, new object[0]);
        }

        /// <summary>
        /// Transition from the current state via the specified trigger.
        /// The target state is determined by the configuration of the current state.
        /// Actions associated with leaving the current state and entering the new one
        /// will be invoked.
        /// </summary>
        /// <typeparam name="TArg0">
        /// Type of the first trigger argument.
        /// </typeparam>
        /// <param name="trigger">
        /// The trigger to fire.
        /// </param>
        /// <param name="arg0">
        /// The first argument.
        /// </param>
        /// <exception cref="System.InvalidOperationException">
        /// The current state does
        /// not allow the trigger to be fired.
        /// </exception>
        public void Fire<TArg0>(TriggerWithParameters<TArg0> trigger, TArg0 arg0)
        {
            Enforce.ArgumentNotNull(trigger, "trigger");
            this.InternalFire(trigger.Trigger, arg0);
        }

        /// <summary>
        /// Transition from the current state via the specified trigger.
        /// The target state is determined by the configuration of the current state.
        /// Actions associated with leaving the current state and entering the new one
        /// will be invoked.
        /// </summary>
        /// <typeparam name="TArg0">
        /// Type of the first trigger argument.
        /// </typeparam>
        /// <typeparam name="TArg1">
        /// Type of the second trigger argument.
        /// </typeparam>
        /// <param name="trigger">
        /// The trigger to fire.
        /// </param>
        /// <param name="arg0">
        /// The first argument.
        /// </param>
        /// <param name="arg1">
        /// The second argument.
        /// </param>
        /// <exception cref="System.InvalidOperationException">
        /// The current state does
        /// not allow the trigger to be fired.
        /// </exception>
        public void Fire<TArg0, TArg1>(TriggerWithParameters<TArg0, TArg1> trigger, TArg0 arg0, TArg1 arg1)
        {
            Enforce.ArgumentNotNull(trigger, "trigger");
            this.InternalFire(trigger.Trigger, arg0, arg1);
        }

        /// <summary>
        /// Transition from the current state via the specified trigger.
        /// The target state is determined by the configuration of the current state.
        /// Actions associated with leaving the current state and entering the new one
        /// will be invoked.
        /// </summary>
        /// <typeparam name="TArg0">
        /// Type of the first trigger argument.
        /// </typeparam>
        /// <typeparam name="TArg1">
        /// Type of the second trigger argument.
        /// </typeparam>
        /// <typeparam name="TArg2">
        /// Type of the third trigger argument.
        /// </typeparam>
        /// <param name="trigger">
        /// The trigger to fire.
        /// </param>
        /// <param name="arg0">
        /// The first argument.
        /// </param>
        /// <param name="arg1">
        /// The second argument.
        /// </param>
        /// <param name="arg2">
        /// The third argument.
        /// </param>
        /// <exception cref="System.InvalidOperationException">
        /// The current state does
        /// not allow the trigger to be fired.
        /// </exception>
        public void Fire<TArg0, TArg1, TArg2>(
            TriggerWithParameters<TArg0, TArg1, TArg2> trigger, TArg0 arg0, TArg1 arg1, TArg2 arg2)
        {
            Enforce.ArgumentNotNull(trigger, "trigger");
            this.InternalFire(trigger.Trigger, arg0, arg1, arg2);
        }

        /// <summary>
        /// Determine if the state machine is in the supplied state.
        /// </summary>
        /// <param name="state">
        /// The state to test for.
        /// </param>
        /// <returns>
        /// True if the current state is equal to, or a substate of,
        /// the supplied state.
        /// </returns>
        public bool IsInState(TState state)
        {
            return this.CurrentRepresentation.IsIncludedIn(state);
        }

        /// <summary>
        /// Override the default behaviour of throwing an exception when an unhandled trigger
        /// is fired.
        /// </summary>
        /// <param name="unhandledTriggerAction">
        /// An action to call when an unhandled trigger is fired.
        /// </param>
        public void OnUnhandledTrigger(Action<TState, TTrigger> unhandledTriggerAction)
        {
            if (unhandledTriggerAction == null)
            {
                throw new ArgumentNullException("unhandledTriggerAction");
            }

            this._unhandledTriggerAction = unhandledTriggerAction;
        }

        /// <summary>
        /// Specify the arguments that must be supplied when a specific trigger is fired.
        /// </summary>
        /// <typeparam name="TArg0">
        /// Type of the first trigger argument.
        /// </typeparam>
        /// <param name="trigger">
        /// The underlying trigger value.
        /// </param>
        /// <returns>
        /// An object that can be passed to the Fire() method in order to 
        /// fire the parameterised trigger.
        /// </returns>
        public TriggerWithParameters<TArg0> SetTriggerParameters<TArg0>(TTrigger trigger)
        {
            var configuration = new TriggerWithParameters<TArg0>(trigger);
            this.SaveTriggerConfiguration(configuration);
            return configuration;
        }

        /// <summary>
        /// Specify the arguments that must be supplied when a specific trigger is fired.
        /// </summary>
        /// <typeparam name="TArg0">
        /// Type of the first trigger argument.
        /// </typeparam>
        /// <typeparam name="TArg1">
        /// Type of the second trigger argument.
        /// </typeparam>
        /// <param name="trigger">
        /// The underlying trigger value.
        /// </param>
        /// <returns>
        /// An object that can be passed to the Fire() method in order to 
        /// fire the parameterised trigger.
        /// </returns>
        public TriggerWithParameters<TArg0, TArg1> SetTriggerParameters<TArg0, TArg1>(TTrigger trigger)
        {
            var configuration = new TriggerWithParameters<TArg0, TArg1>(trigger);
            this.SaveTriggerConfiguration(configuration);
            return configuration;
        }

        /// <summary>
        /// Specify the arguments that must be supplied when a specific trigger is fired.
        /// </summary>
        /// <typeparam name="TArg0">
        /// Type of the first trigger argument.
        /// </typeparam>
        /// <typeparam name="TArg1">
        /// Type of the second trigger argument.
        /// </typeparam>
        /// <typeparam name="TArg2">
        /// Type of the third trigger argument.
        /// </typeparam>
        /// <param name="trigger">
        /// The underlying trigger value.
        /// </param>
        /// <returns>
        /// An object that can be passed to the Fire() method in order to 
        /// fire the parameterised trigger.
        /// </returns>
        public TriggerWithParameters<TArg0, TArg1, TArg2> SetTriggerParameters<TArg0, TArg1, TArg2>(TTrigger trigger)
        {
            var configuration = new TriggerWithParameters<TArg0, TArg1, TArg2>(trigger);
            this.SaveTriggerConfiguration(configuration);
            return configuration;
        }

        /// <summary>
        /// A human-readable representation of the state machine.
        /// </summary>
        /// <returns>A description of the current state and permitted triggers.</returns>
        public override string ToString()
        {
            return string.Format(
                "StateMachine {{ State = {0}, PermittedTriggers = {{ {1} }}}}", 
                this.State, 
                string.Join(", ", this.PermittedTriggers.Select(t => t.ToString()).ToArray()));
        }

        #endregion

        #region Explicit Interface Methods

        /// <summary>
        /// The clone.
        /// </summary>
        /// <returns>
        /// The System.Object.
        /// </returns>
        object ICloneable.Clone()
        {
            return this.Clone();
        }

        #endregion

        #region Methods

        /// <summary>
        /// The default unhandled trigger action.
        /// </summary>
        /// <param name="state">
        /// The state.
        /// </param>
        /// <param name="trigger">
        /// The trigger.
        /// </param>
        /// <exception cref="InvalidOperationException">
        /// </exception>
        private static void DefaultUnhandledTriggerAction(TState state, TTrigger trigger)
        {
            throw new InvalidOperationException(
                string.Format(StateMachineResources.NoTransitionsPermitted, trigger, state));
        }

        /// <summary>
        /// The get representation.
        /// </summary>
        /// <param name="state">
        /// The state.
        /// </param>
        /// <returns>
        /// The Stateless.StateMachine`2+StateRepresentation.
        /// </returns>
        private StateRepresentation GetRepresentation(TState state)
        {
            StateRepresentation result;

            if (!this._stateConfiguration.TryGetValue(state, out result))
            {
                result = new StateRepresentation(state);
                this._stateConfiguration.Add(state, result);
            }

            return result;
        }

        /// <summary>
        /// The internal fire.
        /// </summary>
        /// <param name="trigger">
        /// The trigger.
        /// </param>
        /// <param name="args">
        /// The args.
        /// </param>
        private void InternalFire(TTrigger trigger, params object[] args)
        {
            TriggerWithParameters configuration;
            if (this._triggerConfiguration.TryGetValue(trigger, out configuration))
            {
                configuration.ValidateParameters(args);
            }

            TriggerBehaviour triggerBehaviour;
            if (!this.CurrentRepresentation.TryFindHandler(trigger, out triggerBehaviour))
            {
                this._unhandledTriggerAction(this.CurrentRepresentation.UnderlyingState, trigger);
                return;
            }

            TState source = this.State;
            TState destination;
            if (triggerBehaviour.ResultsInTransitionFrom(source, args, out destination))
            {
                var transition = new Transition(source, destination, trigger);

                this.CurrentRepresentation.Exit(transition);
                this.State = transition.Destination;
                this.CurrentRepresentation.Enter(transition, args);
            }
        }

        /// <summary>
        /// The save trigger configuration.
        /// </summary>
        /// <param name="trigger">
        /// The trigger.
        /// </param>
        /// <exception cref="InvalidOperationException">
        /// </exception>
        private void SaveTriggerConfiguration(TriggerWithParameters trigger)
        {
            if (this._triggerConfiguration.ContainsKey(trigger.Trigger))
            {
                throw new InvalidOperationException(
                    string.Format(StateMachineResources.CannotReconfigureParameters, trigger));
            }

            this._triggerConfiguration.Add(trigger.Trigger, trigger);
        }

        #endregion
    }
}