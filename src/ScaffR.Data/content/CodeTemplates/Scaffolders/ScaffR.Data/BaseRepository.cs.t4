<#@ Template Language="C#" HostSpecific="True" Inherits="DynamicTransform" #>
<#@ Output Extension="cs" #>
namespace <#= Model.Namespace #>.Data
{
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Data.Entity;
    using System.Linq;

    using Core.Common.Paging;
    using Core.Interfaces.Data;
    using Core.Interfaces.Paging;
    using Core.Model;

    /// <summary>
    /// An abstract baseclass handling basic CRUD operations against the context.
    /// </summary>
    /// <typeparam name="T"></typeparam>
    public abstract class BaseRepository<T> : IDisposable, IRepository<T> where T : PersistentEntity
    {        
        protected readonly IDbSet<T> Dbset;
        protected readonly IDatabaseFactory DatabaseFactory;
        protected IDataContext Context;

        protected BaseRepository(IDatabaseFactory databaseFactory)
        {
            this.DatabaseFactory = databaseFactory;            
            this.Dbset = this.DataContext.DbSet<T>();
        }

		public virtual IQueryable<T> Query
        {
            get { return _dbset; }
        }

        public IDataContext DataContext
        {
            get { return this.Context ?? (this.Context = this.DatabaseFactory.Get()); }
        }

        protected string EntitySetName { get; set; }

        public virtual void SaveOrUpdate(T entity)
        {
            if (UnitOfWork.IsPersistent(entity))
            {
                this.DataContext.Entry(entity).State = EntityState.Modified;
            }
            else
                this.Dbset.Add(entity);
        }

        public virtual T GetById(int id)
        {
            return this.Query.SingleOrDefault(e => e.Id == id);
        }

        public virtual IQueryable<T> GetAll()
        {
            return this.Query;
        }

        public virtual IQueryable<T> GetAllReadOnly()
        {
            return this.Query.AsNoTracking();
        }

        public virtual void Delete(T entity)
        {
            this.Dbset.Remove(entity);
        }

        public virtual IEnumerable<T> Find(System.Linq.Expressions.Expression<Func<T, bool>> expression, int maxHits = 100)
        {
            return this.Query.Where(expression).Take(maxHits);
        }

        public IPage<T> Page(int page = 1, int pageSize = 10)
        {
            var internalPage = page - 1;
            var data = this.Query.OrderByDescending(k => k.Created).Skip(pageSize * internalPage).Take(pageSize).AsEnumerable();
            return new Page<T>(data, this.Dbset.Count(), pageSize, page);
        }

        public void Dispose()
        {
            this.DataContext.ObjectContext().Dispose();
        }
    }
}