<#@ Template Language="C#" HostSpecific="True" Inherits="DynamicTransform" #>
<#@ Output Extension="cs" #>
//IMPORTANT - Modifications to this file may be overwritten:
//If you need to implement your own logic/code do it in a partial class/interface.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.ServiceModel;
using <#= Model.Namespace #>.Core.Interfaces.Paging;
using <#= Model.Namespace #>.Core.Interfaces.Validation;

namespace <#= Model.Namespace #>.Core.Interfaces.Service
{
    /// <summary>
    /// Generic base interface for all services.
    /// Purpose:
    /// - Implement BusinessLogic in services
    /// - Hide IRepository from being exposed further out than service layer.
    /// </summary>
    /// <typeparam name="T"></typeparam>
    [ServiceContract]
    public interface IService<T>
    {
        [OperationContract]
        IQueryable<T> GetAll();
		
		[OperationContract]
		IQueryable<T> GetAllReadOnly();

        [OperationContract]
        T GetById(int id);

        [OperationContract]
        IValidationContainer<T> SaveOrUpdate(T entity);

        [OperationContract]
        void Delete(T entity);

        [OperationContract]
        IEnumerable<T> Find(Expression<Func<T, bool>> expression, int maxHits = 100);
		
		[OperationContract]
        IPage<T> Page(int page = 1, int pageSize = 10);
    }
}
